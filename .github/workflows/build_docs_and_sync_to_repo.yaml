name: Build Sphinx Documentation and Sync to External Repo

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for the documentation'
        required: true
        default: 'latest'
        type: string
      target_branch:
        description: 'Target branch in destination repo'
        required: false
        default: 'main'
        type: string

env:
  # Configuration - adjust these to your needs
  DOCS_SOURCE_DIR: 'python_client/kubetorch/docs'  # Directory containing your Sphinx configuration
  PYTHON_VERSION: '3.10'
  SPHINX_BUILD_DIR: '_build'

jobs:
  build-and-sync:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install kubetorch
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        uv pip install --system -e ./python_client[client]
      shell: bash

    - name: Install docs requirements
      run: |
        pip install -r ${{ env.DOCS_SOURCE_DIR }}/requirements.txt

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Use commit SHA for automatic builds
          VERSION="${{ github.sha }}"
          # Or use a timestamp: VERSION=$(date +%Y%m%d-%H%M%S)
          # Or extract from a version file if you have one
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building documentation for version: $VERSION"

    - name: Build Sphinx documentation (JSON)
      run: |
        cd ${{ env.DOCS_SOURCE_DIR }}

        # Build JSON format
        make json

        # Verify JSON files were created
        find ${{ env.SPHINX_BUILD_DIR }}/json -name "*.fjson" -o -name "*.json" | head -10

    - name: Prepare JSON files
      run: |
        # Create a staging directory for the files to sync
        mkdir -p staging

        # Copy JSON files to staging area
        if [ -d "${{ env.DOCS_SOURCE_DIR }}/${{ env.SPHINX_BUILD_DIR }}/json" ]; then
          cp -r ${{ env.DOCS_SOURCE_DIR }}/${{ env.SPHINX_BUILD_DIR }}/json/* staging/
        else
          echo "Error: JSON build directory not found"
          exit 1
        fi

        # Create a manifest file with build info
        cat > staging/build-info.json << EOF
        {
          "version": "${{ steps.version.outputs.version }}",
          "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "source_commit": "${{ github.sha }}",
          "source_repo": "${{ github.repository }}",
          "builder": "sphinx-json",
          "workflow_run": "${{ github.run_id }}"
        }
        EOF

    - name: Checkout destination repository
      uses: actions/checkout@v4
      with:
        repository: run-house/kubetorch-docs
        token: ${{ secrets.KUBETORCH_DOCS_TOKEN }}
        path: dest-repo
        ref: ${{ github.event.inputs.target_branch || 'main' }}

    - name: Sync files to destination repository
      run: |
        cd dest-repo

        # Configure git
        git config user.name "Documentation Bot"
        git config user.email "action@github.com"

        # Create the version directory if it doesn't exist
        mkdir -p v${{ steps.version.outputs.version }}

        # Remove existing files in this version (clean update)
        rm -rf v${{ steps.version.outputs.version }}/*

        # Copy new files
        cp -r ../staging/* v${{ steps.version.outputs.version }}/

    - name: Commit and push changes
      run: |
        cd dest-repo

        # Add changes
        git add v${{ steps.version.outputs.version }}/

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi

        # Commit changes
        git commit -m "Update documentation for version ${{ steps.version.outputs.version }}

        Source: ${{ github.repository }}@${{ github.sha }}
        Workflow: ${{ github.run_id }}
        Build time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

        # Push changes
        git push origin ${{ github.event.inputs.target_branch || 'main' }}

    - name: Create summary
      run: |
        echo "## Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Files Synced:** $(find staging/${{ steps.version.outputs.version }} -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- **Destination:** ${{ secrets.DEST_REPO }}/docs/${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
