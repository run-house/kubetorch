apiVersion: v1
kind: ConfigMap
metadata:
  name: kubetorch-proxy-nginx-config-template
  namespace: {{ .Release.Namespace }}
data:
  nginx.conf: |-
    worker_processes 1;

    events { worker_connections 1024; }

    # TCP proxying (for direct rsync)
    # Note: deprecated as of v0.1.15
    stream {
        upstream rsync_backend {
            server kubetorch-rsync.{{ .Release.Namespace }}.svc.cluster.local:873;
        }

        server {
            listen 8873;
            proxy_pass rsync_backend;
        }
    }

    # HTTP proxying (for everything else)
    http {
        resolver {{ .Values.nginx.resolver }} valid=5s;

        # WebSocket upgrade headers
        map $http_upgrade $connection_upgrade {
            default upgrade;
            '' close;
        }

        server {
            listen 8080;

            # Health check
            location {{ .Values.nginxProxy.backends.health.route }} {
                access_log off;
                return 200 '{"status":"ok","version":"{{ .Chart.Version }}","config":{"otel_enabled":{{ .Values.kubetorchConfig.otelEnabled }}}}';
                add_header Content-Type text/plain;
            }

            location ^~ {{ .Values.nginxProxy.backends.metrics.route }}/ {
                resolver {{ .Values.nginx.resolver }} valid=5s;
                set $prom_host {{ .Values.nginxProxy.backends.metrics.host }}:{{ .Values.nginxProxy.backends.metrics.port }};
                # Strip the /prometheus/ prefix manually
                rewrite ^/prometheus/(.*)$ /$1 break;
                proxy_pass http://$prom_host;
                proxy_set_header Host {{ .Values.nginxProxy.backends.metrics.host }};
                proxy_http_version 1.1;
            }

            location ^~ {{ .Values.nginxProxy.backends.logging.route }}/ {
                resolver {{ .Values.nginx.resolver }} valid=5s;
                {{- if .Values.ephemeralLogStorage.enabled }}
                set $loki_host "{{ .Values.nginxProxy.backends.logging.host }}:{{ .Values.ephemeralLogStorage.port }}";
                {{- else }}
                set $loki_host "{{ .Values.nginxProxy.backends.logging.host }}:80";
                {{- end }}
                proxy_pass http://$loki_host;
                proxy_http_version 1.1;
                # WebSocket headers
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_cache_bypass $http_upgrade;
            }

            # Namespace-aware rsync tunnel: /rsync/{namespace}/
            location ~ ^/rsync/([^/]+)/?(.*)$ {
                set $namespace $1;

                # Allow very large transfers
                client_max_body_size {{ .Values.nginxProxy.maxBodySize.rsync }};

                # WebSocket proxy to namespace-specific rsync
                proxy_pass http://kubetorch-rsync.$namespace.svc.cluster.local:8080;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_cache_bypass $http_upgrade;
            }

            # Default service proxy (ex: http://localhost:3200/namespace/svc-name/fn_name)
            location ~ ^/([^/]+)/([^/]+)(/.*)?$ {
                set $namespace $1;
                set $service $2;
                set $rest $3;

                client_max_body_size {{ .Values.nginxProxy.maxBodySize.api }};

                proxy_pass http://$service.$namespace.svc.cluster.local$rest;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_buffering off;
                proxy_request_buffering off;

                # Increase timeouts for long-running operations like model loading
                proxy_connect_timeout 300s;
                proxy_send_timeout 300s;
                proxy_read_timeout 30d;
            }
        }
    }
